using System;
using System.Globalization;

namespace Gold.Core.Users
{
    /// <summary>
    /// Represents a User
    /// </summary>
    public class User
    {
        /// <summary>
        /// User Roles that can be used
        /// </summary>
        public static readonly string[] _Roles = { "Member", "Admin", "UnregisteredUser", "Vendor", "Donator" };
        /// <summary>
        /// DB id
        /// </summary>
        public Guid UserId { get; set; }
        /// <summary>
        /// Role of the user
        /// </summary>
        public string Role { get; set; }
        /// <summary>
        /// First name (also middle name)
        /// </summary>
        public string FirstName { get; set; }
        /// <summary>
        /// Family name
        /// </summary>
        public string FamilyName { get; set; }
        /// <summary>
        /// Date of birth
        /// </summary>
        public DateTime Birthdate { get; set; }
        /// <summary>
        /// Email address
        /// </summary>
        public string Email { get; set; }
        /// <summary>
        /// Password of the user
        /// </summary>
        public string Password { get; set; }
        /// <summary>
        /// TCK number
        /// </summary>
        public string TcKimlikNo { get; set; }
        /// <summary>
        /// Mobile number
        /// </summary>
        public string Phone { get; set; }
        /// <summary>
        /// Photo link
        /// </summary>
        public string Photo { get; set; }
        /// <summary>
        /// GOLD balance
        /// </summary>
        public decimal Balance { get; set; }
        /// <summary>
        /// IBAN of the user
        /// </summary>
        public string IBAN { get; set; }
        /// <summary>
        /// Member id generated by goldtag
        /// </summary>
        public int MemberId { get; set; }
        /// <summary>
        /// If true user can be considered lvl 1 (old system)
        /// </summary>
        public bool Verified { get; set; }
        /// <summary>
        /// If true then user must complete SmS validation
        /// </summary>
        public bool Banned { get; set; }
        /// <summary>
        /// Special comments by admins (to be used for banning etc.)
        /// </summary>
        public string AdminNotes { get; set; }
        /// <summary>
        /// User register time and date
        /// </summary>
        public DateTime DateCreated { get; set; }
        /// <summary>
        /// Amount of total deposits
        /// </summary>
        public int AmountOfDeposits { get; set; }
        /// <summary>
        ///  Aount of total withdraws
        /// </summary>
        public int AmountOfWithdrawals { get; set; }
        /// <summary>
        /// Blocked gold grams
        /// </summary>
        public decimal? BlockedGrams { get; set; }
        /// <summary>
        /// Private Constructor Required for EFCore Database framework
        /// </summary>
        private User() { }
        /// <summary>
        /// Creates a new User
        /// </summary>
        /// <param name="memberId">Memebr id of the user 9 digits</param>
        /// <param name="firstName">First and middle name</param>
        /// <param name="familyName">Family name</param>
        /// <param name="email">Email address</param>
        /// <param name="pass">Password</param>
        /// <param name="tck">TCK number</param>
        /// <param name="phone">Phone (must be valid)</param>
        /// <param name="birthDate">Birthdate</param>
        /// <param name="role">User role</param>
        public User(int memberId, string firstName, string familyName,
                    string email, string pass, string tck,
                    string phone, string birthDate, string role)
        {
            if (!Utilities.ArrayContains(_Roles, role))
            {
                throw new ArgumentException("Unknown user role: " + role);
            }
            MemberId = memberId;
            FirstName = firstName;
            FamilyName = familyName;
            Email = email;
            Password = pass;
            TcKimlikNo = tck;
            Phone = phone;
            if (birthDate != "")
                Birthdate = DateTime.ParseExact(birthDate, "yyyy-MM-dd", CultureInfo.InvariantCulture);
            else
                Birthdate = DateTime.Now;
            Verified = false;
            Banned = true;
            Balance = 0.00M;
            Role = role;
            DateCreated = DateTime.Now;
            AmountOfDeposits = AmountOfWithdrawals = 0;
        }

        /// <summary>
        /// Creates unregistered user (experimental constructor)
        /// </summary>
        /// <param name="firstName">First name</param>
        /// <param name="familyName">family name</param>
        /// <param name="birthDate">birth date</param>
        /// <returns></returns>
        public static User CreateUnregisteredUser(string firstName, string familyName, string birthDate)
        {
            return new User(1, firstName, familyName, "no@mail.com", "N0P4$sW0rd1234", "1234", "1234", birthDate, "UnregisteredUser");
        }

        /// <summary>
        /// Verifies SmS
        /// </summary>
        public void VerifySignUp()
        {
            Banned = false;
        }

        /// <summary>
        /// Changes the Balance of the user
        /// </summary>
        /// <param name="value">Can be either negtive or positive value</param>
        public void ManipulateBalance(decimal value)
        {
            Balance += value;
        }

        /// <summary>
        /// Updated the users phone number assuming the phone number already validated
        /// </summary>
        /// <param name="newPhone">new phone number</param>
        public void UpdatePhone(string newPhone)
        {
            Phone = newPhone;
        }

        /// <summary>
        /// UPdates users Iban number assuming its been validated
        /// </summary>
        /// <param name="iban">new iban value</param>
        public void UpdateIban(string iban)
        {
            IBAN = iban;
        }

        /// <summary>
        /// Updates user role
        /// </summary>
        /// <param name="role">new user role</param>
        public void UpdateRole(string role)
        {
            Role = role;
        }

        /// <summary>
        /// Bans user from the system
        /// </summary>
        /// <param name="reason">Reason for the ban</param>
        public void PermanentlyBanUser(string reason)
        {
            Banned = true;
            AdminNotes = (AdminNotes != null) ? AdminNotes += ":" + reason : reason;
        }

        /// <summary>
        /// Lifts user ban
        /// </summary>
        /// <param name="reason">Reason for the lift</param>
        public void LiftUserBan(string reason)
        {
            Banned = false;
            AdminNotes = (AdminNotes != null) ? AdminNotes += ":" + reason : reason;

        }

    }
}
